---
// Header
import '@/src/styles/global.css';
import { ClientRouter } from 'astro:transitions';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const locale = getLangFromUrl(Astro.url.pathname);
const t = useTranslations(locale);

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = `${t('header.title')}`,
	description = t('header.description'),
} = Astro.props;
---

<meta charset='UTF-8' />
<meta
	name='description'
	property='og:description'
	content={description}
/>
<meta
	name='viewport'
	content='width=device-width'
/>
<meta
	name='generator'
	content={Astro.generator}
/>
<title>{title}</title>

<link
	rel='icon'
	type='image/svg+xml'
	href='/favicon.svg'
/>

<link
	rel='preconnect'
	href='https://fonts.googleapis.com'
/>

<link
	rel='preconnect'
	href='https://fonts.gstatic.com'
	crossorigin
/>

<link
	href='https://fonts.googleapis.com/css2?family=Alata&display=swap'
	rel='stylesheet'
/>

<link
	rel='sitemap'
	href='/sitemap-index.xml'
/>

<ClientRouter />

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme'))
			return localStorage.getItem('theme');
		return window.matchMedia('(prefers-color-scheme: dark)').matches ?
				'dark'
			:	'light';
	};

	const getLanguagePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('locale'))
			return localStorage.getItem('locale');
		const lang = document.documentElement.getAttribute('lang');
		//console.log(lang);
		return lang;
	};

	function applyTheme() {
		const isDark = getThemePreference() === 'dark';
		document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

		if (typeof localStorage !== 'undefined') {
			const observer = new MutationObserver(() => {
				const isDark =
					document.documentElement.classList.contains('theme-dark');
				localStorage.setItem('theme', isDark ? 'dark' : 'light');
			});
			observer.observe(document.documentElement, {
				attributes: true,
				attributeFilter: ['class'],
			});
		}
	}

	function applyLanguage() {
		const locale = getLanguagePreference();
		//console.log('applyLanguage: ' + locale);
		localStorage.setItem('locale', locale);
	}

	document.addEventListener('astro:after-swap', applyTheme);
	applyTheme();
	applyLanguage();
</script>
